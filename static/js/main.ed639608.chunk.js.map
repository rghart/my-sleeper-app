{"version":3,"sources":["SearchBar.js","SearchFilterButton.js","PlayerInfoItem.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","children","allLeagueIDs","leagueID","updateLeagueID","getLeagueData","className","value","onChange","map","league","league_id","name","onClick","SearchFilterButton","checked","handleChange","labelName","type","PlayerInfoItem","player","addToRoster","rankingPlayersIdsList","key","player_id","position","is_taken","full_name","team","toString","rostered_by","indexOf","App","state","playerInfo","playerData","leagueData","isLoading","filteredPlayersIdsList","isTyping","searchText","checkedItems","showAvailable","showOnlyMyPlayers","rosterPositions","a","setState","urls","requests","url","fetch","Promise","all","then","responses","response","json","data","console","log","markTakenPlayers","leagueIds","roster_positions","filter","pos","filterPlayers","catch","error","rosterData","managerData","playerObject","i","Object","keys","length","currentManagerId","owner_id","currentManagerData","find","manager","user_id","manager_display_name","display_name","players","forEach","updateSearchText","e","target","item","index","splice","push","updateRankings","playerInfoArray","values","sort","b","search_rank","options","useExtendedSearch","fuse","Fuse","rankString","addLineBreak","replace","splitLineBreak","split","searchResultsArray","line","splitString","firstLastTeamArrays","join","results","search","$and","search_first_name","search_last_name","newPlayers","playerID","includes","fantasy_positions","positionIndex","this","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ed639608.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBar = ({ children, allLeagueIDs, leagueID, updateLeagueID, getLeagueData }) => {\n  return (\n    <div className=\"search-box\">\n      <div>\n        {children}\n      </div>\n      <div>\n          <select value={leagueID} onChange={updateLeagueID}>\n              {allLeagueIDs.map(league => (\n                <option value={league.league_id}>{league.name}</option>\n              ))}\n          </select>\n        <button onClick={getLeagueData}>\n            Submit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nconst SearchFilterButton = ({ checked, handleChange, labelName, name }) => {\n  return (\n    <label className={`radio-label`}>\n      <input\n        className=\"radioPad\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleChange}\n        name={name}\n      />\n      {labelName}\n    </label>\n  );\n}\n\nexport default SearchFilterButton;\n","import React from 'react';\n\nconst PlayerInfoItem = ({ player, addToRoster, rankingPlayersIdsList }) => {\n  return (\n      <div key={player.player_id} className={`single-player-item ${player.position} ${player.is_taken ? \"\" : \"available\"}`}>\n        <div className=\"player-name\">\n            <p><b>Player name: {player.full_name}</b></p>\n            <p className=\"player-info-item\">- {player.team}</p>\n            <p className=\"player-info-item\">({player.position})</p>\n        </div>\n        <div className=\"player-info\">\n            <p className=\"player-info-item\"><b>Is rostered:</b> {player.is_taken ? player.is_taken.toString() : \"false\"} </p>\n            <p className=\"player-info-item\"><b>Rostered by:</b> {player.rostered_by ? player.rostered_by : \"None\"}</p>\n            <p className=\"player-info-item\"><b>Weekly rank:</b> {rankingPlayersIdsList.indexOf(player.player_id) + 1}</p>\n            <button onClick={() => addToRoster(player)}>\n                Add\n            </button>\n        </div>\n      </div>\n  );\n}\n\nexport default PlayerInfoItem;\n","import React from 'react';\nimport './App.css';\nimport playerData from './sleeper_player_data';\nimport SearchBar from './SearchBar';\nimport SearchFilterButton from './SearchFilterButton';\nimport PlayerInfoItem from './PlayerInfoItem';\nimport Fuse from 'fuse.js';\n\n// Update player data with curl https://api.sleeper.app/v1/players/nfl --output sleeper_player_data.json\n\nclass App extends React.Component {\n  state = {\n    playerInfo: playerData,\n    leagueData: [],\n    isLoading: true,\n    rankingPlayersIdsList: [],\n    filteredPlayersIdsList: [],\n    isTyping: false,\n    searchText: \"\",\n    checkedItems: [\"QB\", \"RB\", \"WR\", \"TE\", \"K\", \"DEF\"],\n    showAvailable: true,\n    showOnlyMyPlayers: true,\n    leagueID: \"521036158513700864\",\n    allLeagueIDs: [],\n    rosterPositions: [],\n  };\n\n  componentDidMount() {\n    this.getLeagueData();\n  }\n\n  getLeagueData = async () => {\n      this.setState({\n        isLoading: true,\n      });\n    const leagueID = this.state.leagueID;\n    const urls = [\n      `https://api.sleeper.app/v1/league/${leagueID}/rosters`,\n      `https://api.sleeper.app/v1/league/${leagueID}/users`,\n      `https://api.sleeper.app/v1/league/${leagueID}`,\n      `https://api.sleeper.app/v1/user/521035584588267520/leagues/nfl/2020`\n    ]\n    let requests = urls.map(url => fetch(url));\n    Promise.all(requests)\n    .then(responses => {\n      return Promise.all(responses.map(response => {\n        return response.json();\n      }))\n  })\n    .then(data => {\n        console.log(data);\n      this.markTakenPlayers(data[0], data[1]);\n      let leagueIds = data[3];\n      this.setState({\n        leagueData: data,\n        isLoading: false,\n        rosterPositions: data[2].roster_positions.filter(pos => pos !== \"BN\"),\n        allLeagueIDs: leagueIds\n      });\n      if (this.state.rankingPlayersIdsList) {\n          this.filterPlayers();\n      }\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n  }\n\n  markTakenPlayers = (rosterData, managerData) => {\n    let playerObject = this.state.playerInfo;\n    if (this.state.rankingPlayersIdsList) {\n        for (let i = 0; i < Object.keys(playerObject).length + 1; i++) {\n            if (playerObject[i]) {\n                playerObject[i].is_taken = false;\n                playerObject[i].rostered_by = null;\n            }\n        }\n    }\n    for (let i = 0; i < rosterData.length; i++) {\n      const currentManagerId = rosterData[i].owner_id;\n      const currentManagerData = managerData.find(manager => manager.user_id === currentManagerId);\n      rosterData[i].manager_display_name = currentManagerData.display_name;\n      rosterData[i].players.forEach(player => {\n        playerObject[player].is_taken = true;\n        playerObject[player].rostered_by = rosterData[i].manager_display_name;\n      })\n    }\n    this.setState({\n      playerInfo: playerObject\n    })\n  }\n\n  updateSearchText = (e) => {\n      const searchText = e.target.value;\n      this.setState({\n        searchText\n      });\n    }\n\n    updateLeagueID = (e) => {\n        const leagueID = e.target.value;\n        this.setState({\n          leagueID\n        });\n    }\n\n    handleChange = (e) => {\n      const item = e.target.name;\n      const index = this.state.checkedItems.indexOf(item);\n      const checkedItems = this.state.checkedItems;\n      index !== -1 ? checkedItems.splice(index, 1) : checkedItems.push(item);\n      this.setState({\n          checkedItems: checkedItems\n      });\n      this.filterPlayers();\n    }\n\n    updateRankings = async () => {\n        this.setState({\n          isLoading: true,\n        });\n        const playerInfoArray = Object.values(this.state.playerInfo);\n        playerInfoArray.sort((a, b) => a.search_rank - b.search_rank);\n        const options = {\n            useExtendedSearch: true,\n            keys: [\n                \"search_last_name\",\n                \"search_first_name\",\n                \"team\",\n            ]\n        }\n        const fuse = new Fuse(playerInfoArray, options);\n\n        let rankString = this.state.searchText;\n        let addLineBreak = rankString.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>')\n        let splitLineBreak = addLineBreak.split('<br>');\n        let searchResultsArray = [];\n\n        splitLineBreak.forEach(line => {\n            line = line.replace(/[0-9]/g, '');\n            let splitString = line.split('');\n            splitString.splice(1, 1, \" \");\n            let nameAndTeam = splitString.join(\"\");\n            let firstLastTeamArrays = nameAndTeam.split(/\\t/)[0];\n            firstLastTeamArrays = firstLastTeamArrays.split(\" \");\n            if (firstLastTeamArrays[3]) {\n                firstLastTeamArrays.splice(2, 1);\n            }\n            if (firstLastTeamArrays[1].split(\"\")[1] === \".\") {\n                firstLastTeamArrays[1].split(\"\").splice(0, 2);\n            }\n\n            let results = fuse.search({\n              $and: [\n                  { search_first_name: `^${firstLastTeamArrays[0]}` },\n                  { search_last_name: firstLastTeamArrays[1] },\n                  { team: firstLastTeamArrays[2] }\n              ]\n            });\n            if (results[0]) {\n                searchResultsArray.push(results[0].item.player_id);\n                if (results[0].item.search_rank > 500) {\n                    console.log(`${results[0].item.full_name} ${results[0].item.position} ${results[0].item.team} Rank: ${searchResultsArray.length - 1}`)\n                }\n            } else {\n                console.log(`Couldn't find ${firstLastTeamArrays[0]} ${firstLastTeamArrays[1]} ${firstLastTeamArrays[2]}`)\n            }\n        })\n\n        await this.setState({\n            rankingPlayersIdsList: searchResultsArray,\n            isLoading: false\n        })\n        this.filterPlayers();\n    //    this.buildRoster();\n    }\n\n    filterPlayers = () => {\n        const newPlayers = this.state.rankingPlayersIdsList.filter(playerID => this.state.checkedItems.includes(this.state.playerInfo[playerID].position) && (this.state.playerInfo[playerID].is_taken !== true || this.state.playerInfo[playerID].rostered_by === 'ryangh'));\n        this.setState({\n            filteredPlayersIdsList: newPlayers\n        })\n    }\n\n    addToRoster = (playerInfo) => {\n        let { rosterPositions } = this.state;\n        console.log(playerInfo);\n        if (playerInfo.position === \"TE\" || playerInfo.position === \"RB\" || playerInfo.position === \"WR\") {\n            playerInfo.fantasy_positions.push(\"FLEX\");\n            playerInfo.fantasy_positions.push(\"SUPER_FLEX\");\n        } else if (playerInfo.position === \"QB\") {\n            playerInfo.fantasy_positions.push(\"SUPER_FLEX\");\n        }\n\n        for (let i = 0; i < playerInfo.fantasy_positions.length; i++) {\n            const includesPosition = rosterPositions.includes(playerInfo.fantasy_positions[i]);\n            if (includesPosition) {\n                const positionIndex = rosterPositions.indexOf(playerInfo.fantasy_positions[i]);\n                rosterPositions.splice(positionIndex, 1, playerInfo.fantasy_positions[i] + \" \" + playerInfo.full_name + \" \" + playerInfo.team);\n                break;\n            }\n        }\n         this.setState({\n             rosterPositions: rosterPositions\n         })\n    }\n\n  render() {\n    const { playerInfo, isLoading, filteredPlayersIdsList, searchText, checkedItems, rankingPlayersIdsList, rosterPositions, leagueData } = this.state;\n    if (isLoading) {\n      return <p>Loading...</p>;\n    } else {\n      return (\n      <div className=\"main-container\">\n        <div className=\"search\">\n            <div className=\"position-filter\">\n              <SearchFilterButton name={\"QB\"} handleChange={this.handleChange} labelName={\"QB\"} checked={checkedItems.includes(\"QB\")} />\n              <SearchFilterButton name={\"RB\"} handleChange={this.handleChange} labelName={\"RB\"} checked={checkedItems.includes(\"RB\")} />\n              <SearchFilterButton name={\"WR\"} handleChange={this.handleChange} labelName={\"WR\"} checked={checkedItems.includes(\"WR\")} />\n              <SearchFilterButton name={\"TE\"} handleChange={this.handleChange} labelName={\"TE\"} checked={checkedItems.includes(\"TE\")} />\n              <SearchFilterButton name={\"K\"} handleChange={this.handleChange} labelName={\"K\"} checked={checkedItems.includes(\"K\")} />\n              <SearchFilterButton name={\"DEF\"} handleChange={this.handleChange} labelName={\"DEF\"} checked={checkedItems.includes(\"DEF\")} />\n            </div>\n            <textarea value={searchText} onChange={this.updateSearchText} />\n            <button onClick={this.updateRankings}>\n                Submit\n            </button>\n            </div>\n            <div className=\"player-grid\">\n            {filteredPlayersIdsList.map(id => (\n              <PlayerInfoItem player={playerInfo[id]} addToRoster={this.addToRoster} rankingPlayersIdsList={rankingPlayersIdsList}/>\n            ))}\n            </div>\n        <div className=\"league-grid\">\n            <p><b>{leagueData[2].name}</b></p>\n            <SearchBar allLeagueIDs={this.state.allLeagueIDs} leagueID={this.state.leagueID} updateLeagueID={this.updateLeagueID} getLeagueData={this.getLeagueData}/>\n        </div>\n        <div className=\"roster-positions\">\n            {rosterPositions.map(pos => (\n                <p>{pos}</p>\n            ))}\n        </div>\n      </div>\n    )};\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}